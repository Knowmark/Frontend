/* tslint:disable */
/* eslint-disable */
/**
 * knowmark_backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: tin.svagelj@live.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddUserData
 */
export interface AddUserData {
    /**
     * 
     * @type {string}
     * @memberof AddUserData
     */
    'class': string;
    /**
     * 
     * @type {ClassRole}
     * @memberof AddUserData
     */
    'role': ClassRole;
    /**
     * 
     * @type {string}
     * @memberof AddUserData
     */
    'user': string;
}


/**
 * @type AnswerChoice
 * @export
 */
export type AnswerChoice = AnswerChoiceOneOf | AnswerChoiceOneOf1 | AnswerChoiceOneOf2 | AnswerChoiceOneOf3 | AnswerChoiceOneOf4 | AnswerChoiceOneOf5;

/**
 * 
 * @export
 * @interface AnswerChoiceOneOf
 */
export interface AnswerChoiceOneOf {
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf
     */
    't': AnswerChoiceOneOfTEnum;
    /**
     * 
     * @type {number}
     * @memberof AnswerChoiceOneOf
     */
    'value': number;
}

export const AnswerChoiceOneOfTEnum = {
    Number: 'Number'
} as const;

export type AnswerChoiceOneOfTEnum = typeof AnswerChoiceOneOfTEnum[keyof typeof AnswerChoiceOneOfTEnum];

/**
 * 
 * @export
 * @interface AnswerChoiceOneOf1
 */
export interface AnswerChoiceOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf1
     */
    't': AnswerChoiceOneOf1TEnum;
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf1
     */
    'value': string;
}

export const AnswerChoiceOneOf1TEnum = {
    Short: 'Short'
} as const;

export type AnswerChoiceOneOf1TEnum = typeof AnswerChoiceOneOf1TEnum[keyof typeof AnswerChoiceOneOf1TEnum];

/**
 * 
 * @export
 * @interface AnswerChoiceOneOf2
 */
export interface AnswerChoiceOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf2
     */
    't': AnswerChoiceOneOf2TEnum;
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf2
     */
    'value': string;
}

export const AnswerChoiceOneOf2TEnum = {
    Long: 'Long'
} as const;

export type AnswerChoiceOneOf2TEnum = typeof AnswerChoiceOneOf2TEnum[keyof typeof AnswerChoiceOneOf2TEnum];

/**
 * 
 * @export
 * @interface AnswerChoiceOneOf3
 */
export interface AnswerChoiceOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf3
     */
    't': AnswerChoiceOneOf3TEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnswerChoiceOneOf3
     */
    'value': Array<string>;
}

export const AnswerChoiceOneOf3TEnum = {
    FillIn: 'FillIn'
} as const;

export type AnswerChoiceOneOf3TEnum = typeof AnswerChoiceOneOf3TEnum[keyof typeof AnswerChoiceOneOf3TEnum];

/**
 * 
 * @export
 * @interface AnswerChoiceOneOf4
 */
export interface AnswerChoiceOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf4
     */
    't': AnswerChoiceOneOf4TEnum;
    /**
     * 
     * @type {number}
     * @memberof AnswerChoiceOneOf4
     */
    'value': number;
}

export const AnswerChoiceOneOf4TEnum = {
    Single: 'Single'
} as const;

export type AnswerChoiceOneOf4TEnum = typeof AnswerChoiceOneOf4TEnum[keyof typeof AnswerChoiceOneOf4TEnum];

/**
 * 
 * @export
 * @interface AnswerChoiceOneOf5
 */
export interface AnswerChoiceOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof AnswerChoiceOneOf5
     */
    't': AnswerChoiceOneOf5TEnum;
    /**
     * 
     * @type {File}
     * @memberof AnswerChoiceOneOf5
     */
    'value': File;
}

export const AnswerChoiceOneOf5TEnum = {
    Multiple: 'Multiple'
} as const;

export type AnswerChoiceOneOf5TEnum = typeof AnswerChoiceOneOf5TEnum[keyof typeof AnswerChoiceOneOf5TEnum];

/**
 * @type AnswerValidation
 * @export
 */
export type AnswerValidation = AnswerValidationOneOf | AnswerValidationOneOf1 | AnswerValidationOneOf2 | AnswerValidationOneOf3 | AnswerValidationOneOf4;

/**
 * 
 * @export
 * @interface AnswerValidationOneOf
 */
export interface AnswerValidationOneOf {
    /**
     * 
     * @type {AnswerValidationOneOfBool}
     * @memberof AnswerValidationOneOf
     */
    'Bool': AnswerValidationOneOfBool;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf1
 */
export interface AnswerValidationOneOf1 {
    /**
     * 
     * @type {AnswerValidationOneOf1Exact}
     * @memberof AnswerValidationOneOf1
     */
    'Exact': AnswerValidationOneOf1Exact;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf1Exact
 */
export interface AnswerValidationOneOf1Exact {
    /**
     * 
     * @type {boolean}
     * @memberof AnswerValidationOneOf1Exact
     */
    'case_sensitive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AnswerValidationOneOf1Exact
     */
    'expected': string;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf2
 */
export interface AnswerValidationOneOf2 {
    /**
     * 
     * @type {AnswerValidationOneOf2NumberRange}
     * @memberof AnswerValidationOneOf2
     */
    'NumberRange': AnswerValidationOneOf2NumberRange;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf2NumberRange
 */
export interface AnswerValidationOneOf2NumberRange {
    /**
     * 
     * @type {number}
     * @memberof AnswerValidationOneOf2NumberRange
     */
    'max': number;
    /**
     * 
     * @type {number}
     * @memberof AnswerValidationOneOf2NumberRange
     */
    'min': number;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf3
 */
export interface AnswerValidationOneOf3 {
    /**
     * 
     * @type {AnswerValidationOneOf3Multiple}
     * @memberof AnswerValidationOneOf3
     */
    'Multiple': AnswerValidationOneOf3Multiple;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf3Multiple
 */
export interface AnswerValidationOneOf3Multiple {
    /**
     * 
     * @type {boolean}
     * @memberof AnswerValidationOneOf3Multiple
     */
    'case_sensitive'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnswerValidationOneOf3Multiple
     */
    'expected': Array<string>;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf4
 */
export interface AnswerValidationOneOf4 {
    /**
     * 
     * @type {AnswerValidationOneOf4External}
     * @memberof AnswerValidationOneOf4
     */
    'External': AnswerValidationOneOf4External;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOf4External
 */
export interface AnswerValidationOneOf4External {
    /**
     * 
     * @type {string}
     * @memberof AnswerValidationOneOf4External
     */
    'command': string;
}
/**
 * 
 * @export
 * @interface AnswerValidationOneOfBool
 */
export interface AnswerValidationOneOfBool {
    /**
     * 
     * @type {boolean}
     * @memberof AnswerValidationOneOfBool
     */
    'expected': boolean;
}
/**
 * 
 * @export
 * @interface ClassCreateData
 */
export interface ClassCreateData {
    /**
     * 
     * @type {string}
     * @memberof ClassCreateData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClassCreateData
     */
    'owner'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClassRole = {
    Student: 'Student',
    Assistant: 'Assistant',
    Teacher: 'Teacher'
} as const;

export type ClassRole = typeof ClassRole[keyof typeof ClassRole];


/**
 * @type PartAnswer
 * @export
 */
export type PartAnswer = PartAnswerOneOf;

/**
 * 
 * @export
 * @interface PartAnswerOneOf
 */
export interface PartAnswerOneOf {
    /**
     * 
     * @type {PartAnswerOneOfBool}
     * @memberof PartAnswerOneOf
     */
    'Bool': PartAnswerOneOfBool;
}
/**
 * 
 * @export
 * @interface PartAnswerOneOfBool
 */
export interface PartAnswerOneOfBool {
    /**
     * 
     * @type {boolean}
     * @memberof PartAnswerOneOfBool
     */
    'answer': boolean;
}
/**
 * Implements [RFC7807](https://tools.ietf.org/html/rfc7807).
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Problem
     */
    'body': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'instance_uri'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'type_uri': string;
}
/**
 * @type QuestionKind
 * @export
 */
export type QuestionKind = PartAnswerOneOf;

/**
 * 
 * @export
 * @interface Quiz
 */
export interface Quiz {
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'begin_buffer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'close_on'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'desc'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Quiz
     */
    'expect_focus'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'open_on'?: string | null;
    /**
     * 
     * @type {Array<QuizParticipant>}
     * @memberof Quiz
     */
    'participants'?: Array<QuizParticipant>;
    /**
     * 
     * @type {Array<QuizPart>}
     * @memberof Quiz
     */
    'parts': Array<QuizPart>;
    /**
     * 
     * @type {boolean}
     * @memberof Quiz
     */
    'public'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Quiz
     */
    'show_answer'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Quiz
     */
    'show_results'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'time_limit'?: string | null;
}
/**
 * 
 * @export
 * @interface QuizAnswers
 */
export interface QuizAnswers {
    /**
     * 
     * @type {{ [key: string]: PartAnswer; }}
     * @memberof QuizAnswers
     */
    'answers': { [key: string]: PartAnswer; };
    /**
     * 
     * @type {string}
     * @memberof QuizAnswers
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizAnswers
     */
    'user': string;
}
/**
 * 
 * @export
 * @interface QuizListResponse
 */
export interface QuizListResponse {
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'close_on'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'open_on'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponse
     */
    'time_limit'?: string | null;
}
/**
 * @type QuizPart
 * @export
 */
export type QuizPart = QuizPartOneOf | QuizPartOneOf1;

/**
 * 
 * @export
 * @interface QuizPartOneOf
 */
export interface QuizPartOneOf {
    /**
     * 
     * @type {QuizPartOneOfContent}
     * @memberof QuizPartOneOf
     */
    'Content': QuizPartOneOfContent;
}
/**
 * 
 * @export
 * @interface QuizPartOneOf1
 */
export interface QuizPartOneOf1 {
    /**
     * 
     * @type {QuizPartOneOf1Question}
     * @memberof QuizPartOneOf1
     */
    'Question': QuizPartOneOf1Question;
}
/**
 * 
 * @export
 * @interface QuizPartOneOf1Question
 */
export interface QuizPartOneOf1Question {
    /**
     * 
     * @type {string}
     * @memberof QuizPartOneOf1Question
     */
    'id'?: string;
    /**
     * 
     * @type {QuestionKind}
     * @memberof QuizPartOneOf1Question
     */
    'kind': QuestionKind;
    /**
     * Allow partial answers
     * @type {boolean}
     * @memberof QuizPartOneOf1Question
     */
    'partial'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QuizPartOneOf1Question
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof QuizPartOneOf1Question
     */
    'time_limit'?: string | null;
}
/**
 * 
 * @export
 * @interface QuizPartOneOfContent
 */
export interface QuizPartOneOfContent {
    /**
     * 
     * @type {string}
     * @memberof QuizPartOneOfContent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizPartOneOfContent
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof QuizPartOneOfContent
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface QuizParticipant
 */
export interface QuizParticipant {
    /**
     * 
     * @type {{ [key: string]: AnswerChoice; }}
     * @memberof QuizParticipant
     */
    'choices'?: { [key: string]: AnswerChoice; };
    /**
     * 
     * @type {string}
     * @memberof QuizParticipant
     */
    'started_on': string;
    /**
     * 
     * @type {string}
     * @memberof QuizParticipant
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Role = {
    None: 'None',
    Normal: 'Normal',
    Author: 'Author',
    Admin: 'Admin'
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * User email
     * @type {string}
     * @memberof UserResponse
     */
    'email': string;
    /**
     * User UUID
     * @type {string}
     * @memberof UserResponse
     */
    'id': string;
    /**
     * 
     * @type {Role}
     * @memberof UserResponse
     */
    'user_role': Role;
    /**
     * User username
     * @type {string}
     * @memberof UserResponse
     */
    'username': string;
}


/**
 * 
 * @export
 * @interface ValidationResult
 */
export interface ValidationResult {
    /**
     * 
     * @type {number}
     * @memberof ValidationResult
     */
    'correct_answers': number;
    /**
     * 
     * @type {number}
     * @memberof ValidationResult
     */
    'total_questions': number;
}

/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClassCreateData} classCreateData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classCreate: async (classCreateData: ClassCreateData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classCreateData' is not null or undefined
            assertParamExists('classCreate', 'classCreateData', classCreateData)
            const localVarPath = `/api/v1/class`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classCreateData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login via a login form
         * @summary Login via a login form
         * @param {string} password 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginSubmit: async (password: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginSubmit', 'password', password)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginSubmit', 'username', username)
            const localVarPath = `/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a quiz
         * @summary Create a quiz
         * @param {Quiz} quiz 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizCreate: async (quiz: Quiz, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quiz' is not null or undefined
            assertParamExists('quizCreate', 'quiz', quiz)
            const localVarPath = `/api/v1/quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quiz, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a quiz
         * @summary Delete a quiz
         * @param {string} id quiz ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quizDelete', 'id', id)
            const localVarPath = `/api/v1/quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get quiz information
         * @summary Get quiz information
         * @param {string} id quiz ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizInfo: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quizInfo', 'id', id)
            const localVarPath = `/api/v1/quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all quiz documents
         * @summary List all quiz documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit quiz answers
         * @summary Submit quiz answers
         * @param {string} id 
         * @param {QuizAnswers} quizAnswers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizSubmitAnswers: async (id: string, quizAnswers: QuizAnswers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('quizSubmitAnswers', 'id', id)
            // verify required parameter 'quizAnswers' is not null or undefined
            assertParamExists('quizSubmitAnswers', 'quizAnswers', quizAnswers)
            const localVarPath = `/api/v1/quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizAnswers, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a user
         * @summary Create a user
         * @param {string} email 
         * @param {string} password 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate: async (email: string, password: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('userCreate', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('userCreate', 'password', password)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('userCreate', 'username', username)
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (email !== undefined) { 
                localVarFormParams.set('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user
         * @summary Delete a user
         * @param {string} id ID of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userDelete', 'id', id)
            const localVarPath = `/api/v1/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the user
         * @summary Get information about the user
         * @param {string} id user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userGet', 'id', id)
            const localVarPath = `/api/v1/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of users
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ClassCreateData} classCreateData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classCreate(classCreateData: ClassCreateData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classCreate(classCreateData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login via a login form
         * @summary Login via a login form
         * @param {string} password 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginSubmit(password: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginSubmit(password, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a quiz
         * @summary Create a quiz
         * @param {Quiz} quiz 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizCreate(quiz: Quiz, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizCreate(quiz, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a quiz
         * @summary Delete a quiz
         * @param {string} id quiz ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get quiz information
         * @summary Get quiz information
         * @param {string} id quiz ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizInfo(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quiz>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all quiz documents
         * @summary List all quiz documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuizListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submit quiz answers
         * @summary Submit quiz answers
         * @param {string} id 
         * @param {QuizAnswers} quizAnswers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizSubmitAnswers(id: string, quizAnswers: QuizAnswers, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizSubmitAnswers(id, quizAnswers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a user
         * @summary Create a user
         * @param {string} email 
         * @param {string} password 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCreate(email: string, password: string, username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCreate(email, password, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user
         * @summary Delete a user
         * @param {string} id ID of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about the user
         * @summary Get information about the user
         * @param {string} id user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of users
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * 
         * @param {ClassCreateData} classCreateData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classCreate(classCreateData: ClassCreateData, options?: any): AxiosPromise<void> {
            return localVarFp.classCreate(classCreateData, options).then((request) => request(axios, basePath));
        },
        /**
         * Login via a login form
         * @summary Login via a login form
         * @param {string} password 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginSubmit(password: string, username: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.loginSubmit(password, username, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a quiz
         * @summary Create a quiz
         * @param {Quiz} quiz 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizCreate(quiz: Quiz, options?: any): AxiosPromise<void> {
            return localVarFp.quizCreate(quiz, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a quiz
         * @summary Delete a quiz
         * @param {string} id quiz ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizDelete(id: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.quizDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get quiz information
         * @summary Get quiz information
         * @param {string} id quiz ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizInfo(id: string, options?: any): AxiosPromise<Quiz> {
            return localVarFp.quizInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all quiz documents
         * @summary List all quiz documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizList(options?: any): AxiosPromise<Array<QuizListResponse>> {
            return localVarFp.quizList(options).then((request) => request(axios, basePath));
        },
        /**
         * Submit quiz answers
         * @summary Submit quiz answers
         * @param {string} id 
         * @param {QuizAnswers} quizAnswers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizSubmitAnswers(id: string, quizAnswers: QuizAnswers, options?: any): AxiosPromise<ValidationResult> {
            return localVarFp.quizSubmitAnswers(id, quizAnswers, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a user
         * @summary Create a user
         * @param {string} email 
         * @param {string} password 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(email: string, password: string, username: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userCreate(email, password, username, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user
         * @summary Delete a user
         * @param {string} id ID of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelete(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.userDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about the user
         * @summary Get information about the user
         * @param {string} id user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(id: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of users
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userList(options?: any): AxiosPromise<Array<UserResponse>> {
            return localVarFp.userList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: any): AxiosPromise<void> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI {
    /**
     * 
     * @param {ClassCreateData} classCreateData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public classCreate(classCreateData: ClassCreateData, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).classCreate(classCreateData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login via a login form
     * @summary Login via a login form
     * @param {string} password 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public loginSubmit(password: string, username: string, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).loginSubmit(password, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a quiz
     * @summary Create a quiz
     * @param {Quiz} quiz 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public quizCreate(quiz: Quiz, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).quizCreate(quiz, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a quiz
     * @summary Delete a quiz
     * @param {string} id quiz ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public quizDelete(id: string, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).quizDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get quiz information
     * @summary Get quiz information
     * @param {string} id quiz ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public quizInfo(id: string, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).quizInfo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all quiz documents
     * @summary List all quiz documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public quizList(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).quizList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit quiz answers
     * @summary Submit quiz answers
     * @param {string} id 
     * @param {QuizAnswers} quizAnswers 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public quizSubmitAnswers(id: string, quizAnswers: QuizAnswers, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).quizSubmitAnswers(id, quizAnswers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a user
     * @summary Create a user
     * @param {string} email 
     * @param {string} password 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public userCreate(email: string, password: string, username: string, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).userCreate(email, password, username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user
     * @summary Delete a user
     * @param {string} id ID of user to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public userDelete(id: string, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).userDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about the user
     * @summary Get information about the user
     * @param {string} id user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public userGet(id: string, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).userGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of users
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public userList(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).userList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public userLogout(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }
}


